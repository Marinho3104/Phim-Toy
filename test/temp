// parser::Byte_Code_Converter_Control* getByteCode(char* _code) {

//     parser::Tokenizer_Control* _tkCntrl = new parser::Tokenizer_Control(_code);

//     _tkCntrl->generateTokens();

//     for (int _ = 0; _ < _tkCntrl->tokens->count; _++)

//         std::cout << "Token id -> " << (*_tkCntrl->tokens)[_]->id << std::endl;

//     std::cout << "-------------------" << std::endl;

//     parser::Ast_Control* _astCntrl = new parser::Ast_Control(_tkCntrl->tokens);

//     _astCntrl->generateAst();

//     // parser::optimizerNames(_astCntrl->globalStorage->names);

//     std::cout << "-------------------" << std::endl;

//     parser::Byte_Code_Converter_Control* _bcCntrl = new parser::Byte_Code_Converter_Control(
//         _astCntrl->globalBlock, _astCntrl->globalStorage
//     );

//     _bcCntrl->generateByteCode();

//     // for (int _ = 0; _ < _bcCntrl->byteCodeBlocks->count; _++) {

//     //     std::cout << "--> Code Block <--" << std::endl;

//     //     for (int __ = 0; __ < (*_bcCntrl->byteCodeBlocks)[_]->byteCode->count; __++)

//     //         std::cout << "Byte code -> " << (int) (unsigned char) (*(*_bcCntrl->byteCodeBlocks)[_]->byteCode)[__]->code << " " << (*(*_bcCntrl->byteCodeBlocks)[_]->byteCode)[__]->argument << std::endl;

//     //     std::cout << "--> Code Block End <--" << std::endl;

//     // }

//     // std::cout << "-------------------" << std::endl;

//     return _bcCntrl;

// }